service: project-golgi

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  region: ap-southeast-1
  stage: dev
  timeout: 10
  memorySize: 128
  environment:
    THUMBNAIL_S3_BUCKET: ${self:custom.thumbnailRepository.bucket}
    THUMBNAIL_SIZE: 128
    REGION_NAME: ${self:provider.region}
    METADATA_TABLE: ${self:custom.metadata.table}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Resource: arn:aws:s3:::${self:custom.uploads.bucket}/*
          Action: 's3:GetObject'
        - Effect: 'Allow'
          Resource: arn:aws:s3:::project-golgi-thumbnails/*
          Action: 's3:PutObject'
        - Effect: 'Allow'
          Resource: arn:aws:dynamodb:${self:provider.region}:${self:custom.aws.accountId}:table/${self:custom.metadata.table}
          Action:
            - dynamodb:PutItem
            - dynamodb:Scan

custom:
  aws:
    accountId: 636933184920
  uploads:
    bucket: project-golgi-uploads
  thumbnailRepository:
    bucket: project-golgi-thumbnails
  metadata:
    table: project-golgi-metadata

resources:
  Resources:
    metadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: file_location
            AttributeType: S
        KeySchema:
          - AttributeName: file_location
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.metadata.table}

functions:
  generate-thumbnail:
    handler: handler.generate_thumbnail
    events:
      - s3:
          bucket: ${self:custom.uploads.bucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .png
          existing: true
    layers:
      - arn:aws:lambda:ap-southeast-1:770693421928:layer:Klayers-p38-Pillow:1
  list-files:
    handler: api_handler.list
    events:
      - http:
          path: api/files
          method: GET
          cors: true
plugins:
  - serverless-offline
